
--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'D:\XAMPP\htdocs\wat2019e\assessment2-in_progress\motoritzautopartz\finalschemasql_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "brand" entity.
CREATE TABLE brand(
	brand_id	INTEGER NOT NULL,
	brand_name	VARCHAR(150) UNIQUE,
	brand_logo_image	VARCHAR(200),
	brand_description	VARCHAR(255),
	-- Specify the PRIMARY KEY constraint for table "brand".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_brand PRIMARY KEY (brand_id)
);

-- Create a Database table to represent the "category" entity.
CREATE TABLE category(
	cat_id	INTEGER NOT NULL,
	cat_name	VARCHAR(255),
	-- Specify the PRIMARY KEY constraint for table "category".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_category PRIMARY KEY (cat_id)
);

-- Create a Database table to represent the "user" entity.
CREATE TABLE user(
	user_id	INTEGER NOT NULL,
	first_name	VARCHAR(150),
	last_name	VARCHAR(150),
	contact_number	VARCHAR(50),
	address	VARCHAR(255),
	date_of_birth	DATE,
	user_image	VARCHAR(150),
	email	VARCHAR(200),
	password	VARCHAR(255),
	user_type	VARCHAR(150),
	status	INTEGER,
	username	VARCHAR(200) UNIQUE,
	age	INTEGER,
	fk1_user_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "user".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_user PRIMARY KEY (user_id)
);

-- Create a Database table to represent the "item" entity.
CREATE TABLE item(
	item_id	INTEGER NOT NULL,
	item_name	VARCHAR(200),
	item_image	VARCHAR(200),
    item_description	VARCHAR(255),
	rating_stars	INTEGER,
	stock	INTEGER,
	date_modified	DATE,
	fk1_brand_id	INTEGER NOT NULL,
	fk2_user_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "item".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_item PRIMARY KEY (item_id)
);

-- Create a Database table to represent the "item_category" entity.
CREATE TABLE item_category(
	fk1_cat_id	INTEGER NOT NULL,
	fk2_product_id	INTEGER NOT NULL
);

-- Create a Database table to represent the "admin" entity.
-- This table is representing a sub-type entity, so the primary key will be the same as that
-- defined for table "user" which represents the super-type entity.
CREATE TABLE admin(
	user_id	INTEGER NOT NULL,
	admin_id	INTEGER,
	date_appointed	DATE,
	-- Specify the PRIMARY KEY constraint for table "admin".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_admin PRIMARY KEY (user_id),
	-- Specify a FOREIGN KEY constraint to indicate that this table's primary key (user_id)
	-- references the super-type table's primary key. In this case the key of table "user"
	-- The ON DELETE CASCADE and ON UPDATE CASCADE ensure that if the super-type key data is
	-- deleted or updated then the changes will be cascaded down to this sub-type.
	--  i.e. if the value of the super-type key is changed the value of this table's key is also changed.
	FOREIGN KEY(user_id) REFERENCES user(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "has" relationship

-- This constraint ensures that the foreign key of table "item"
-- correctly references the primary key of table "brand"

ALTER TABLE item ADD CONSTRAINT fk1_item_to_brand FOREIGN KEY(fk1_brand_id) REFERENCES brand(brand_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "manages" relationship

-- This constraint ensures that the foreign key of table "user"
-- correctly references the primary key of table "user"

ALTER TABLE user ADD CONSTRAINT fk1_user_to_user FOREIGN KEY(fk1_user_id) REFERENCES user(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "modifies" relationship

-- This constraint ensures that the foreign key of table "item"
-- correctly references the primary key of table "user"

ALTER TABLE item ADD CONSTRAINT fk2_item_to_user FOREIGN KEY(fk2_user_id) REFERENCES user(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "has" relationship

-- This constraint ensures that the foreign key of table "item_category"
-- correctly references the primary key of table "category"

ALTER TABLE item_category ADD CONSTRAINT fk1_item_category_to_category FOREIGN KEY(fk1_cat_id) REFERENCES category(cat_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "is_of" relationship

-- This constraint ensures that the foreign key of table "item_category"
-- correctly references the primary key of table "item"

ALTER TABLE item_category ADD CONSTRAINT fk2_item_category_to_item FOREIGN KEY(fk2_product_id) REFERENCES item(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
